// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Word {
    id            String @id @default(cuid())
    word          String
    videoLink     String
    thumbnailLink String
    definition    String @db.Text
}

model Classroom {
    id          String       @id @default(cuid())
    name        String
    createdAt   DateTime     @default(now())
    students    User[]       @relation("StudentClassroom")
    teacherId   String
    coverImage  String
    teacher     User         @relation("TeacherClassroom", fields: [teacherId], references: [id], onDelete: Cascade)
    assignments Assignment[]
    resources   Resources[]
}

model Resources {
    id          String    @id @default(cuid())
    name        String
    description String    @db.Text
    attachment  Json
    classroomId String
    classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
}

model Assignment {
    id          String       @id @default(cuid())
    name        String
    task        String       @db.Text
    classroomId String
    classroom   Classroom    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
    createdAt   DateTime     @default(now())
    deadline    DateTime
    submissions Submission[]
    attachments Json[]
    teacherId   String
    teacher     User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Submission {
    id             String     @id @default(cuid())
    assignmentId   String
    assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
    grade          Int?
    comment        String?
    teacherComment String?
    attachments    Json[]
    studentId      String
    createdAt      DateTime   @default(now())
    student        User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model User {
    id                 String       @id @default(cuid())
    name               String?
    email              String?      @unique
    emailVerified      DateTime?
    image              String?
    role               String       @default("student")
    accounts           Account[]
    sessions           Session[]
    classrooms         Classroom[]  @relation("StudentClassroom")
    createdClassrooms  Classroom[]  @relation("TeacherClassroom")
    createdAssignments Assignment[]
    submissions        Submission[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
